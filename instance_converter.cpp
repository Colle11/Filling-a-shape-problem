// To convert the raw instances generated by the instance generator
// into the .dzn and .lp format.

#include <iostream>
#include <fstream>
#include <string>
#include <sys/stat.h>

using namespace std;

const string dir("benchmark_instances");
const string lp_dir(dir + "/lp_benchmark_instances");
const string dzn_dir(dir + "/dzn_benchmark_instances");

int main(int argc, char* argv[])
{
	string in_file_name;

	if (argc == 1)
	{
		cout << "Name of the file containing the benchmark instance: ";
		cin >> in_file_name;
	}
	else if (argc == 2)
	{
		in_file_name = argv[1];
	}
	else
	{
		cerr << "Usage: " << argv[0] << " <FileName>" << endl;
		return 1;
	}

	struct stat sb;

	if(stat(dir.c_str(), &sb) == -1)
	{
		const int dir_err = mkdir(dir.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
		if (dir_err == -1)
		{
			cout << "Error creating directory " + dir << endl;
			return 1;
		}

		const int lp_dir_err = mkdir(lp_dir.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
		if (lp_dir_err == -1)
		{
			cout << "Error creating directory " + lp_dir << endl;
			return 1;
		}

		const int dzn_dir_err = mkdir(dzn_dir.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
		if (dzn_dir_err == -1)
		{
			cout << "Error creating directory " + dzn_dir << endl;
			return 1;
		}
	}

	string x;
	string y;
	string out_file_name;
	ifstream in_file(in_file_name);
	size_t found_start = in_file_name.find_last_of("/");
	size_t found_end = in_file_name.find_last_of(".");
	found_start++;
	out_file_name = in_file_name.substr(found_start, found_end - found_start);
	found_start = out_file_name.find_first_of("_");
	found_start++;
	out_file_name = out_file_name.substr(found_start);
	ofstream lp_out_file(lp_dir + "/" + out_file_name + ".lp");
	ofstream dzn_out_file(dzn_dir + "/" + out_file_name + ".dzn");

	if (in_file.is_open() && lp_out_file.is_open() && dzn_out_file.is_open())
	{
		lp_out_file << "% Input: sequence of points" << endl;

		dzn_out_file << "% Input: sequence of points" << endl;

		bool first_dzn_write = true;
		int num_points = 0;

		in_file.ignore(256, '(');
		while (!in_file.eof())
		{
			getline(in_file, x, ',');
			getline(in_file, y, ')');
			num_points++;
			in_file.ignore(256, '(');

			lp_out_file << "point(" << x << "," << y << ")." << endl;

			if (!first_dzn_write)
			{
				dzn_out_file << string(14, ' ');
			}
			else
			{
				dzn_out_file << "seq_points = [";
				first_dzn_write = false;
			}

			dzn_out_file << "|" << x << "," << y << endl;
		}

		dzn_out_file << string(13, ' ') + "|];" << endl;
		dzn_out_file << endl;
		dzn_out_file << "num_points = " << num_points << ";" << endl;

		in_file.close();
		lp_out_file.close();
		dzn_out_file.close();
	}
	else
	{
		in_file.close();
		lp_out_file.close();
		dzn_out_file.close();
		cout << "Unable to open the file" << endl;
		return 1;
	}

	return 0;
}